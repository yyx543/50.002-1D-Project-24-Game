module game_regfile (
    input clk,  // clock
    input rst,  // reset
    
    input read_address_1[4],    // ra
    input read_address_2[4],    // rb
    input write_address[4],     // rc
    input write_data[16],       // wdata
    input write_enable,         // we
    
    output read_data_1[16],     // radata
    output read_data_2[16],     // rbdata
    
    output integers[16],        // 4 integers
    
    output results[2],          // round results
    output score[4],            // score
    
    output intinp[16],          // integer inputs
    
    output opinp[6]             // operation inputs
    
  ) {
  .clk(clk){
    .rst(rst){
      dff integer_one[16];
      dff integer_two[16];
      dff integer_three[16];
      dff integer_four[16];
      
      dff result[16];
      dff points[16];
      dff timer[16];
      
      dff input_one[16];
      dff input_two[16];
      dff input_three[16];
      dff input_four[16];
      
      dff op_one[16];
      dff op_two[16];
      dff op_three[16];
      
      dff results_timer[16];
      dff temp[16];
    }
  }
  always {
    //always read 
    if (write_enable) {
      case (write_address) {
        b0000: integer_one.d = write_data;
        b0001: integer_two.d = write_data;
        b0010: integer_three.d = write_data;
        b0011: integer_four.d = write_data;
        
        b0100: result.d = write_data;
        b0101: points.d = write_data;
        b0110: timer.d = write_data;
        
        b0111: input_one.d = write_data;
        b1000: input_two.d = write_data;
        b1001: input_three.d = write_data;
        b1010: input_four.d = write_data;
        
        b1011: op_one.d = write_data;
        b1100: op_two.d = write_data;
        b1101: op_three.d = write_data;
        
        b1110: results_timer.d = write_data;
        b1111: temp.d = write_data;
      }
    }
      
    case (read_address_1) {
      b0000: read_data_1 = integer_one.q;      //0
      b0001: read_data_1 = integer_two.q;      //1
      b0010: read_data_1 = integer_three.q;    //2
      b0011: read_data_1 = integer_four.q;     //3
      
      b0100: read_data_1 = result.q;           //4
      b0101: read_data_1 = points.q;           //5
      b0110: read_data_1 = timer.q;            //6
      
      b0111: read_data_1 = input_one.q;        //7
      b1000: read_data_1 = input_two.q;        //8
      b1001: read_data_1 = input_three.q;      //9
      b1010: read_data_1 = input_four.q;       //10
      
      b1011: read_data_1 = op_one.q;           //11
      b1100: read_data_1 = op_two.q;           //12
      b1101: read_data_1 = op_three.q;         //13
      
      b1110: read_data_1 = results_timer.q;    //14
      b1111: read_data_1 = temp.q;             //15
      default: read_data_1 = 0;
    }
      
    case (read_address_2) {
      b0000: read_data_2 = integer_one.q;      //0
      b0001: read_data_2 = integer_two.q;      //1
      b0010: read_data_2 = integer_three.q;    //2
      b0011: read_data_2 = integer_four.q;     //3
      
      b0100: read_data_2 = result.q;           //4
      b0101: read_data_2 = points.q;           //5
      b0110: read_data_2 = timer.q;            //6
      
      b0111: read_data_2 = input_one.q;        //7
      b1000: read_data_2 = input_two.q;        //8
      b1001: read_data_2 = input_three.q;      //9
      b1010: read_data_2 = input_four.q;       //10
      
      b1011: read_data_2 = op_one.q;           //11
      b1100: read_data_2 = op_two.q;           //12
      b1101: read_data_2 = op_three.q;         //13
      
      b1110: read_data_2 = results_timer.q;    //14
      b1111: read_data_2 = temp.q;             //15
      default: read_data_2 = 0;
    }
    
    integers[3:0] = integer_one.q[3:0];
    integers[7:4] = integer_two.q[3:0];
    integers[11:8] = integer_three.q[3:0];
    integers[15:12] = integer_four.q[3:0];
    
    results = result.q[1:0];
    score = points.q[3:0];
    
    intinp[3:0] = input_one.q[3:0];
    intinp[7:4] = input_two.q[3:0];
    intinp[11:8] = input_three.q[3:0];
    intinp[15:12] = input_four.q[3:0];
    
    opinp[1:0] = op_one.q[1:0];
    opinp[3:2] = op_two.q[1:0];
    opinp[5:4] = op_three.q[1:0];
  }
}