/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [6:0] integer_seg,
    output reg [3:0] integer_sel,
    output reg [6:0] timer_seg,
    output reg [3:0] timer_sel,
    output reg [6:0] score_seg,
    output reg [6:0] input_one_seg,
    output reg [6:0] input_two_seg,
    output reg [6:0] input_three_seg,
    output reg [6:0] input_four_seg,
    output reg [2:0] first_op_led,
    output reg [2:0] second_op_led,
    output reg [2:0] third_op_led,
    output reg [1:0] results_led,
    input button1,
    input button2,
    input button3,
    input button4,
    input plus_button,
    input sub_button,
    input mul_button,
    input confirm_button,
    input reset_button
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_beta_timer_decrease;
  wire [1-1:0] M_beta_timer_set_sixty;
  wire [16-1:0] M_beta_integers;
  wire [2-1:0] M_beta_results;
  wire [4-1:0] M_beta_score;
  wire [16-1:0] M_beta_intinp;
  wire [6-1:0] M_beta_opinp;
  reg [1-1:0] M_beta_confirm_button;
  reg [1-1:0] M_beta_reset_button;
  reg [1-1:0] M_beta_button1;
  reg [1-1:0] M_beta_button2;
  reg [1-1:0] M_beta_button3;
  reg [1-1:0] M_beta_button4;
  reg [1-1:0] M_beta_plus_button;
  reg [1-1:0] M_beta_sub_button;
  reg [1-1:0] M_beta_mul_button;
  game_beta_2 beta (
    .clk(clk),
    .rst(rst),
    .confirm_button(M_beta_confirm_button),
    .reset_button(M_beta_reset_button),
    .button1(M_beta_button1),
    .button2(M_beta_button2),
    .button3(M_beta_button3),
    .button4(M_beta_button4),
    .plus_button(M_beta_plus_button),
    .sub_button(M_beta_sub_button),
    .mul_button(M_beta_mul_button),
    .timer_decrease(M_beta_timer_decrease),
    .timer_set_sixty(M_beta_timer_set_sixty),
    .integers(M_beta_integers),
    .results(M_beta_results),
    .score(M_beta_score),
    .intinp(M_beta_intinp),
    .opinp(M_beta_opinp)
  );
  wire [7-1:0] M_timer_seg;
  wire [2-1:0] M_timer_sel;
  reg [8-1:0] M_timer_values;
  two_seven_seg_3 timer (
    .clk(clk),
    .rst(rst),
    .values(M_timer_values),
    .seg(M_timer_seg),
    .sel(M_timer_sel)
  );
  wire [8-1:0] M_timer_dec_digits;
  reg [1-1:0] M_timer_dec_dec;
  reg [1-1:0] M_timer_dec_set_sixty;
  multi_dec_ctr_4 timer_dec (
    .clk(clk),
    .rst(rst),
    .dec(M_timer_dec_dec),
    .set_sixty(M_timer_dec_set_sixty),
    .digits(M_timer_dec_digits)
  );
  wire [7-1:0] M_multi_integer_seg;
  wire [4-1:0] M_multi_integer_sel;
  reg [16-1:0] M_multi_integer_values;
  four_seven_seg_5 multi_integer (
    .clk(clk),
    .rst(rst),
    .values(M_multi_integer_values),
    .seg(M_multi_integer_seg),
    .sel(M_multi_integer_sel)
  );
  wire [1-1:0] M_btn_cond_button1_out;
  reg [1-1:0] M_btn_cond_button1_in;
  button_conditioner_6 btn_cond_button1 (
    .clk(clk),
    .in(M_btn_cond_button1_in),
    .out(M_btn_cond_button1_out)
  );
  wire [1-1:0] M_btn_cond_button2_out;
  reg [1-1:0] M_btn_cond_button2_in;
  button_conditioner_6 btn_cond_button2 (
    .clk(clk),
    .in(M_btn_cond_button2_in),
    .out(M_btn_cond_button2_out)
  );
  wire [1-1:0] M_btn_cond_button3_out;
  reg [1-1:0] M_btn_cond_button3_in;
  button_conditioner_6 btn_cond_button3 (
    .clk(clk),
    .in(M_btn_cond_button3_in),
    .out(M_btn_cond_button3_out)
  );
  wire [1-1:0] M_btn_cond_button4_out;
  reg [1-1:0] M_btn_cond_button4_in;
  button_conditioner_6 btn_cond_button4 (
    .clk(clk),
    .in(M_btn_cond_button4_in),
    .out(M_btn_cond_button4_out)
  );
  wire [1-1:0] M_btn_cond_plus_button_out;
  reg [1-1:0] M_btn_cond_plus_button_in;
  button_conditioner_6 btn_cond_plus_button (
    .clk(clk),
    .in(M_btn_cond_plus_button_in),
    .out(M_btn_cond_plus_button_out)
  );
  wire [1-1:0] M_btn_cond_sub_button_out;
  reg [1-1:0] M_btn_cond_sub_button_in;
  button_conditioner_6 btn_cond_sub_button (
    .clk(clk),
    .in(M_btn_cond_sub_button_in),
    .out(M_btn_cond_sub_button_out)
  );
  wire [1-1:0] M_btn_cond_mul_button_out;
  reg [1-1:0] M_btn_cond_mul_button_in;
  button_conditioner_6 btn_cond_mul_button (
    .clk(clk),
    .in(M_btn_cond_mul_button_in),
    .out(M_btn_cond_mul_button_out)
  );
  wire [1-1:0] M_btn_cond_confirm_button_out;
  reg [1-1:0] M_btn_cond_confirm_button_in;
  button_conditioner_6 btn_cond_confirm_button (
    .clk(clk),
    .in(M_btn_cond_confirm_button_in),
    .out(M_btn_cond_confirm_button_out)
  );
  wire [1-1:0] M_btn_cond_reset_button_out;
  reg [1-1:0] M_btn_cond_reset_button_in;
  button_conditioner_6 btn_cond_reset_button (
    .clk(clk),
    .in(M_btn_cond_reset_button_in),
    .out(M_btn_cond_reset_button_out)
  );
  wire [1-1:0] M_edg_dtc_button1_out;
  reg [1-1:0] M_edg_dtc_button1_in;
  edge_detector_7 edg_dtc_button1 (
    .clk(clk),
    .in(M_edg_dtc_button1_in),
    .out(M_edg_dtc_button1_out)
  );
  wire [1-1:0] M_edg_dtc_button2_out;
  reg [1-1:0] M_edg_dtc_button2_in;
  edge_detector_7 edg_dtc_button2 (
    .clk(clk),
    .in(M_edg_dtc_button2_in),
    .out(M_edg_dtc_button2_out)
  );
  wire [1-1:0] M_edg_dtc_button3_out;
  reg [1-1:0] M_edg_dtc_button3_in;
  edge_detector_7 edg_dtc_button3 (
    .clk(clk),
    .in(M_edg_dtc_button3_in),
    .out(M_edg_dtc_button3_out)
  );
  wire [1-1:0] M_edg_dtc_button4_out;
  reg [1-1:0] M_edg_dtc_button4_in;
  edge_detector_7 edg_dtc_button4 (
    .clk(clk),
    .in(M_edg_dtc_button4_in),
    .out(M_edg_dtc_button4_out)
  );
  wire [1-1:0] M_edg_dtc_plus_button_out;
  reg [1-1:0] M_edg_dtc_plus_button_in;
  edge_detector_7 edg_dtc_plus_button (
    .clk(clk),
    .in(M_edg_dtc_plus_button_in),
    .out(M_edg_dtc_plus_button_out)
  );
  wire [1-1:0] M_edg_dtc_sub_button_out;
  reg [1-1:0] M_edg_dtc_sub_button_in;
  edge_detector_7 edg_dtc_sub_button (
    .clk(clk),
    .in(M_edg_dtc_sub_button_in),
    .out(M_edg_dtc_sub_button_out)
  );
  wire [1-1:0] M_edg_dtc_mul_button_out;
  reg [1-1:0] M_edg_dtc_mul_button_in;
  edge_detector_7 edg_dtc_mul_button (
    .clk(clk),
    .in(M_edg_dtc_mul_button_in),
    .out(M_edg_dtc_mul_button_out)
  );
  wire [1-1:0] M_edg_dtc_reset_button_out;
  reg [1-1:0] M_edg_dtc_reset_button_in;
  edge_detector_7 edg_dtc_reset_button (
    .clk(clk),
    .in(M_edg_dtc_reset_button_in),
    .out(M_edg_dtc_reset_button_out)
  );
  wire [1-1:0] M_edg_dtc_confirm_button_out;
  reg [1-1:0] M_edg_dtc_confirm_button_in;
  edge_detector_7 edg_dtc_confirm_button (
    .clk(clk),
    .in(M_edg_dtc_confirm_button_in),
    .out(M_edg_dtc_confirm_button_out)
  );
  
  wire [7-1:0] M_score_segs;
  reg [4-1:0] M_score_char;
  seven_seg_8 score (
    .char(M_score_char),
    .segs(M_score_segs)
  );
  
  wire [7-1:0] M_input_one_segs;
  reg [4-1:0] M_input_one_char;
  seven_seg_no_zero_9 input_one (
    .char(M_input_one_char),
    .segs(M_input_one_segs)
  );
  
  wire [7-1:0] M_input_two_segs;
  reg [4-1:0] M_input_two_char;
  seven_seg_no_zero_9 input_two (
    .char(M_input_two_char),
    .segs(M_input_two_segs)
  );
  
  wire [7-1:0] M_input_three_segs;
  reg [4-1:0] M_input_three_char;
  seven_seg_no_zero_9 input_three (
    .char(M_input_three_char),
    .segs(M_input_three_segs)
  );
  
  wire [7-1:0] M_input_four_segs;
  reg [4-1:0] M_input_four_char;
  seven_seg_no_zero_9 input_four (
    .char(M_input_four_char),
    .segs(M_input_four_segs)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    M_btn_cond_button1_in = button1;
    M_edg_dtc_button1_in = M_btn_cond_button1_out;
    M_beta_button1 = M_edg_dtc_button1_out;
    M_btn_cond_button2_in = button2;
    M_edg_dtc_button2_in = M_btn_cond_button2_out;
    M_beta_button2 = M_edg_dtc_button2_out;
    M_btn_cond_button3_in = button3;
    M_edg_dtc_button3_in = M_btn_cond_button3_out;
    M_beta_button3 = M_edg_dtc_button3_out;
    M_btn_cond_button4_in = button4;
    M_edg_dtc_button4_in = M_btn_cond_button4_out;
    M_beta_button4 = M_edg_dtc_button4_out;
    M_btn_cond_plus_button_in = plus_button;
    M_edg_dtc_plus_button_in = M_btn_cond_plus_button_out;
    M_beta_plus_button = M_edg_dtc_plus_button_out;
    M_btn_cond_sub_button_in = sub_button;
    M_edg_dtc_sub_button_in = M_btn_cond_sub_button_out;
    M_beta_sub_button = M_edg_dtc_sub_button_out;
    M_btn_cond_mul_button_in = mul_button;
    M_edg_dtc_mul_button_in = M_btn_cond_mul_button_out;
    M_beta_mul_button = M_edg_dtc_mul_button_out;
    M_btn_cond_confirm_button_in = confirm_button;
    M_edg_dtc_confirm_button_in = M_btn_cond_confirm_button_out;
    M_beta_confirm_button = M_edg_dtc_confirm_button_out;
    M_btn_cond_reset_button_in = reset_button;
    M_edg_dtc_reset_button_in = M_btn_cond_reset_button_out;
    M_beta_reset_button = M_edg_dtc_reset_button_out;
    M_timer_dec_dec = M_beta_timer_decrease;
    M_timer_dec_set_sixty = M_beta_timer_set_sixty;
    M_timer_values = M_timer_dec_digits[0+7-:8];
    timer_seg = M_timer_seg;
    timer_sel = ~M_timer_sel[0+1-:2];
    M_multi_integer_values[0+3-:4] = M_beta_integers[0+3-:4];
    M_multi_integer_values[4+3-:4] = M_beta_integers[4+3-:4];
    M_multi_integer_values[8+3-:4] = M_beta_integers[8+3-:4];
    M_multi_integer_values[12+3-:4] = M_beta_integers[12+3-:4];
    integer_seg = M_multi_integer_seg;
    integer_sel = ~M_multi_integer_sel;
    M_score_char = M_beta_score;
    score_seg = M_score_segs;
    M_input_one_char = M_beta_intinp[0+3-:4];
    input_one_seg = M_input_one_segs;
    M_input_two_char = M_beta_intinp[4+3-:4];
    input_two_seg = M_input_two_segs;
    M_input_three_char = M_beta_intinp[8+3-:4];
    input_three_seg = M_input_three_segs;
    M_input_four_char = M_beta_intinp[12+3-:4];
    input_four_seg = M_input_four_segs;
    
    case (M_beta_opinp[0+1-:2])
      2'h1: begin
        first_op_led = 1'h1;
      end
      2'h2: begin
        first_op_led = 4'ha;
      end
      2'h3: begin
        first_op_led = 7'h64;
      end
      default: begin
        first_op_led = 1'h0;
      end
    endcase
    
    case (M_beta_opinp[2+1-:2])
      2'h1: begin
        second_op_led = 1'h1;
      end
      2'h2: begin
        second_op_led = 4'ha;
      end
      2'h3: begin
        second_op_led = 7'h64;
      end
      default: begin
        second_op_led = 1'h0;
      end
    endcase
    
    case (M_beta_opinp[4+1-:2])
      2'h1: begin
        third_op_led = 1'h1;
      end
      2'h2: begin
        third_op_led = 4'ha;
      end
      2'h3: begin
        third_op_led = 7'h64;
      end
      default: begin
        third_op_led = 1'h0;
      end
    endcase
    results_led = M_beta_results;
  end
endmodule
