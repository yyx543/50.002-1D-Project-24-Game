/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module multiplier_25 (
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] p
  );
  
  
  
  reg [15:0] b0a;
  reg [14:0] b1a;
  reg [15:0] r1c;
  reg [15:0] r2s;
  reg [13:0] b2a;
  reg [15:0] r2c;
  reg [15:0] r3s;
  reg [12:0] b3a;
  reg [15:0] r3c;
  reg [15:0] r4s;
  reg [11:0] b4a;
  reg [15:0] r4c;
  reg [15:0] r5s;
  reg [10:0] b5a;
  reg [15:0] r5c;
  reg [15:0] r6s;
  reg [9:0] b6a;
  reg [15:0] r6c;
  reg [15:0] r7s;
  reg [8:0] b7a;
  reg [15:0] r7c;
  reg [15:0] r8s;
  reg [7:0] b8a;
  reg [15:0] r8c;
  reg [15:0] r9s;
  reg [6:0] b9a;
  reg [15:0] r9c;
  reg [15:0] r10s;
  reg [5:0] b10a;
  reg [15:0] r10c;
  reg [15:0] r11s;
  reg [4:0] b11a;
  reg [15:0] r11c;
  reg [15:0] r12s;
  reg [3:0] b12a;
  reg [15:0] r12c;
  reg [15:0] r13s;
  reg [2:0] b13a;
  reg [15:0] r13c;
  reg [15:0] r14s;
  reg [1:0] b14a;
  reg [15:0] r14c;
  reg [15:0] r15s;
  reg [0:0] b15a;
  reg [15:0] r15c;
  reg [15:0] r16s;
  
  wire [(4'hf+0)-1:0] M_fulladder1r_s;
  wire [(4'hf+0)-1:0] M_fulladder1r_cout;
  reg [(4'hf+0)-1:0] M_fulladder1r_x;
  reg [(4'hf+0)-1:0] M_fulladder1r_y;
  reg [(4'hf+0)-1:0] M_fulladder1r_cin;
  
  genvar GEN_fulladder1r0;
  generate
  for (GEN_fulladder1r0=0;GEN_fulladder1r0<4'hf;GEN_fulladder1r0=GEN_fulladder1r0+1) begin: fulladder1r_gen_0
    full_adder_26 fulladder1r (
      .x(M_fulladder1r_x[GEN_fulladder1r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder1r_y[GEN_fulladder1r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder1r_cin[GEN_fulladder1r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder1r_s[GEN_fulladder1r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder1r_cout[GEN_fulladder1r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'he+0)-1:0] M_fulladder2r_s;
  wire [(4'he+0)-1:0] M_fulladder2r_cout;
  reg [(4'he+0)-1:0] M_fulladder2r_x;
  reg [(4'he+0)-1:0] M_fulladder2r_y;
  reg [(4'he+0)-1:0] M_fulladder2r_cin;
  
  genvar GEN_fulladder2r0;
  generate
  for (GEN_fulladder2r0=0;GEN_fulladder2r0<4'he;GEN_fulladder2r0=GEN_fulladder2r0+1) begin: fulladder2r_gen_0
    full_adder_26 fulladder2r (
      .x(M_fulladder2r_x[GEN_fulladder2r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder2r_y[GEN_fulladder2r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder2r_cin[GEN_fulladder2r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder2r_s[GEN_fulladder2r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder2r_cout[GEN_fulladder2r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'hd+0)-1:0] M_fulladder3r_s;
  wire [(4'hd+0)-1:0] M_fulladder3r_cout;
  reg [(4'hd+0)-1:0] M_fulladder3r_x;
  reg [(4'hd+0)-1:0] M_fulladder3r_y;
  reg [(4'hd+0)-1:0] M_fulladder3r_cin;
  
  genvar GEN_fulladder3r0;
  generate
  for (GEN_fulladder3r0=0;GEN_fulladder3r0<4'hd;GEN_fulladder3r0=GEN_fulladder3r0+1) begin: fulladder3r_gen_0
    full_adder_26 fulladder3r (
      .x(M_fulladder3r_x[GEN_fulladder3r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder3r_y[GEN_fulladder3r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder3r_cin[GEN_fulladder3r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder3r_s[GEN_fulladder3r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder3r_cout[GEN_fulladder3r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'hc+0)-1:0] M_fulladder4r_s;
  wire [(4'hc+0)-1:0] M_fulladder4r_cout;
  reg [(4'hc+0)-1:0] M_fulladder4r_x;
  reg [(4'hc+0)-1:0] M_fulladder4r_y;
  reg [(4'hc+0)-1:0] M_fulladder4r_cin;
  
  genvar GEN_fulladder4r0;
  generate
  for (GEN_fulladder4r0=0;GEN_fulladder4r0<4'hc;GEN_fulladder4r0=GEN_fulladder4r0+1) begin: fulladder4r_gen_0
    full_adder_26 fulladder4r (
      .x(M_fulladder4r_x[GEN_fulladder4r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder4r_y[GEN_fulladder4r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder4r_cin[GEN_fulladder4r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder4r_s[GEN_fulladder4r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder4r_cout[GEN_fulladder4r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'hb+0)-1:0] M_fulladder5r_s;
  wire [(4'hb+0)-1:0] M_fulladder5r_cout;
  reg [(4'hb+0)-1:0] M_fulladder5r_x;
  reg [(4'hb+0)-1:0] M_fulladder5r_y;
  reg [(4'hb+0)-1:0] M_fulladder5r_cin;
  
  genvar GEN_fulladder5r0;
  generate
  for (GEN_fulladder5r0=0;GEN_fulladder5r0<4'hb;GEN_fulladder5r0=GEN_fulladder5r0+1) begin: fulladder5r_gen_0
    full_adder_26 fulladder5r (
      .x(M_fulladder5r_x[GEN_fulladder5r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder5r_y[GEN_fulladder5r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder5r_cin[GEN_fulladder5r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder5r_s[GEN_fulladder5r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder5r_cout[GEN_fulladder5r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'ha+0)-1:0] M_fulladder6r_s;
  wire [(4'ha+0)-1:0] M_fulladder6r_cout;
  reg [(4'ha+0)-1:0] M_fulladder6r_x;
  reg [(4'ha+0)-1:0] M_fulladder6r_y;
  reg [(4'ha+0)-1:0] M_fulladder6r_cin;
  
  genvar GEN_fulladder6r0;
  generate
  for (GEN_fulladder6r0=0;GEN_fulladder6r0<4'ha;GEN_fulladder6r0=GEN_fulladder6r0+1) begin: fulladder6r_gen_0
    full_adder_26 fulladder6r (
      .x(M_fulladder6r_x[GEN_fulladder6r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder6r_y[GEN_fulladder6r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder6r_cin[GEN_fulladder6r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder6r_s[GEN_fulladder6r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder6r_cout[GEN_fulladder6r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'h9+0)-1:0] M_fulladder7r_s;
  wire [(4'h9+0)-1:0] M_fulladder7r_cout;
  reg [(4'h9+0)-1:0] M_fulladder7r_x;
  reg [(4'h9+0)-1:0] M_fulladder7r_y;
  reg [(4'h9+0)-1:0] M_fulladder7r_cin;
  
  genvar GEN_fulladder7r0;
  generate
  for (GEN_fulladder7r0=0;GEN_fulladder7r0<4'h9;GEN_fulladder7r0=GEN_fulladder7r0+1) begin: fulladder7r_gen_0
    full_adder_26 fulladder7r (
      .x(M_fulladder7r_x[GEN_fulladder7r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder7r_y[GEN_fulladder7r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder7r_cin[GEN_fulladder7r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder7r_s[GEN_fulladder7r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder7r_cout[GEN_fulladder7r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'h8+0)-1:0] M_fulladder8r_s;
  wire [(4'h8+0)-1:0] M_fulladder8r_cout;
  reg [(4'h8+0)-1:0] M_fulladder8r_x;
  reg [(4'h8+0)-1:0] M_fulladder8r_y;
  reg [(4'h8+0)-1:0] M_fulladder8r_cin;
  
  genvar GEN_fulladder8r0;
  generate
  for (GEN_fulladder8r0=0;GEN_fulladder8r0<4'h8;GEN_fulladder8r0=GEN_fulladder8r0+1) begin: fulladder8r_gen_0
    full_adder_26 fulladder8r (
      .x(M_fulladder8r_x[GEN_fulladder8r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder8r_y[GEN_fulladder8r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder8r_cin[GEN_fulladder8r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder8r_s[GEN_fulladder8r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder8r_cout[GEN_fulladder8r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h7+0)-1:0] M_fulladder9r_s;
  wire [(3'h7+0)-1:0] M_fulladder9r_cout;
  reg [(3'h7+0)-1:0] M_fulladder9r_x;
  reg [(3'h7+0)-1:0] M_fulladder9r_y;
  reg [(3'h7+0)-1:0] M_fulladder9r_cin;
  
  genvar GEN_fulladder9r0;
  generate
  for (GEN_fulladder9r0=0;GEN_fulladder9r0<3'h7;GEN_fulladder9r0=GEN_fulladder9r0+1) begin: fulladder9r_gen_0
    full_adder_26 fulladder9r (
      .x(M_fulladder9r_x[GEN_fulladder9r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder9r_y[GEN_fulladder9r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder9r_cin[GEN_fulladder9r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder9r_s[GEN_fulladder9r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder9r_cout[GEN_fulladder9r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h6+0)-1:0] M_fulladder10r_s;
  wire [(3'h6+0)-1:0] M_fulladder10r_cout;
  reg [(3'h6+0)-1:0] M_fulladder10r_x;
  reg [(3'h6+0)-1:0] M_fulladder10r_y;
  reg [(3'h6+0)-1:0] M_fulladder10r_cin;
  
  genvar GEN_fulladder10r0;
  generate
  for (GEN_fulladder10r0=0;GEN_fulladder10r0<3'h6;GEN_fulladder10r0=GEN_fulladder10r0+1) begin: fulladder10r_gen_0
    full_adder_26 fulladder10r (
      .x(M_fulladder10r_x[GEN_fulladder10r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder10r_y[GEN_fulladder10r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder10r_cin[GEN_fulladder10r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder10r_s[GEN_fulladder10r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder10r_cout[GEN_fulladder10r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h5+0)-1:0] M_fulladder11r_s;
  wire [(3'h5+0)-1:0] M_fulladder11r_cout;
  reg [(3'h5+0)-1:0] M_fulladder11r_x;
  reg [(3'h5+0)-1:0] M_fulladder11r_y;
  reg [(3'h5+0)-1:0] M_fulladder11r_cin;
  
  genvar GEN_fulladder11r0;
  generate
  for (GEN_fulladder11r0=0;GEN_fulladder11r0<3'h5;GEN_fulladder11r0=GEN_fulladder11r0+1) begin: fulladder11r_gen_0
    full_adder_26 fulladder11r (
      .x(M_fulladder11r_x[GEN_fulladder11r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder11r_y[GEN_fulladder11r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder11r_cin[GEN_fulladder11r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder11r_s[GEN_fulladder11r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder11r_cout[GEN_fulladder11r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(3'h4+0)-1:0] M_fulladder12r_s;
  wire [(3'h4+0)-1:0] M_fulladder12r_cout;
  reg [(3'h4+0)-1:0] M_fulladder12r_x;
  reg [(3'h4+0)-1:0] M_fulladder12r_y;
  reg [(3'h4+0)-1:0] M_fulladder12r_cin;
  
  genvar GEN_fulladder12r0;
  generate
  for (GEN_fulladder12r0=0;GEN_fulladder12r0<3'h4;GEN_fulladder12r0=GEN_fulladder12r0+1) begin: fulladder12r_gen_0
    full_adder_26 fulladder12r (
      .x(M_fulladder12r_x[GEN_fulladder12r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder12r_y[GEN_fulladder12r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder12r_cin[GEN_fulladder12r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder12r_s[GEN_fulladder12r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder12r_cout[GEN_fulladder12r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(2'h3+0)-1:0] M_fulladder13r_s;
  wire [(2'h3+0)-1:0] M_fulladder13r_cout;
  reg [(2'h3+0)-1:0] M_fulladder13r_x;
  reg [(2'h3+0)-1:0] M_fulladder13r_y;
  reg [(2'h3+0)-1:0] M_fulladder13r_cin;
  
  genvar GEN_fulladder13r0;
  generate
  for (GEN_fulladder13r0=0;GEN_fulladder13r0<2'h3;GEN_fulladder13r0=GEN_fulladder13r0+1) begin: fulladder13r_gen_0
    full_adder_26 fulladder13r (
      .x(M_fulladder13r_x[GEN_fulladder13r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder13r_y[GEN_fulladder13r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder13r_cin[GEN_fulladder13r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder13r_s[GEN_fulladder13r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder13r_cout[GEN_fulladder13r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(2'h2+0)-1:0] M_fulladder14r_s;
  wire [(2'h2+0)-1:0] M_fulladder14r_cout;
  reg [(2'h2+0)-1:0] M_fulladder14r_x;
  reg [(2'h2+0)-1:0] M_fulladder14r_y;
  reg [(2'h2+0)-1:0] M_fulladder14r_cin;
  
  genvar GEN_fulladder14r0;
  generate
  for (GEN_fulladder14r0=0;GEN_fulladder14r0<2'h2;GEN_fulladder14r0=GEN_fulladder14r0+1) begin: fulladder14r_gen_0
    full_adder_26 fulladder14r (
      .x(M_fulladder14r_x[GEN_fulladder14r0*(1)+(1)-1-:(1)]),
      .y(M_fulladder14r_y[GEN_fulladder14r0*(1)+(1)-1-:(1)]),
      .cin(M_fulladder14r_cin[GEN_fulladder14r0*(1)+(1)-1-:(1)]),
      .s(M_fulladder14r_s[GEN_fulladder14r0*(1)+(1)-1-:(1)]),
      .cout(M_fulladder14r_cout[GEN_fulladder14r0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [1-1:0] M_fulladder15r_s;
  wire [1-1:0] M_fulladder15r_cout;
  reg [1-1:0] M_fulladder15r_x;
  reg [1-1:0] M_fulladder15r_y;
  reg [1-1:0] M_fulladder15r_cin;
  full_adder_26 fulladder15r (
    .x(M_fulladder15r_x),
    .y(M_fulladder15r_y),
    .cin(M_fulladder15r_cin),
    .s(M_fulladder15r_s),
    .cout(M_fulladder15r_cout)
  );
  
  always @* begin
    b0a[0+15-:16] = a[0+15-:16] & {5'h10{b[0+0-:1]}};
    p[0+0-:1] = b0a[0+0-:1];
    b1a[0+14-:15] = a[0+14-:15] & {4'hf{b[1+0-:1]}};
    r1c[0+0-:1] = 1'h0;
    M_fulladder1r_x = b0a[1+14-:15];
    M_fulladder1r_y = b1a[0+14-:15];
    M_fulladder1r_cin = r1c[0+14-:15];
    r2s[1+14-:15] = M_fulladder1r_s;
    r1c[1+14-:15] = M_fulladder1r_cout;
    p[1+0-:1] = r2s[1+0-:1];
    b2a[0+13-:14] = a[0+13-:14] & {4'he{b[2+0-:1]}};
    r2c[0+0-:1] = 1'h0;
    M_fulladder2r_x = r2s[2+13-:14];
    M_fulladder2r_y = b2a[0+13-:14];
    M_fulladder2r_cin = r2c[0+13-:14];
    r3s[2+13-:14] = M_fulladder2r_s;
    r2c[1+13-:14] = M_fulladder2r_cout;
    p[2+0-:1] = r3s[2+0-:1];
    b3a[0+12-:13] = a[0+12-:13] & {4'hd{b[3+0-:1]}};
    r3c[0+0-:1] = 1'h0;
    M_fulladder3r_x = r3s[3+12-:13];
    M_fulladder3r_y = b3a[0+12-:13];
    M_fulladder3r_cin = r3c[0+12-:13];
    r4s[3+12-:13] = M_fulladder3r_s;
    r3c[1+12-:13] = M_fulladder3r_cout;
    p[3+0-:1] = r4s[3+0-:1];
    b4a[0+11-:12] = a[0+11-:12] & {4'hc{b[4+0-:1]}};
    r4c[0+0-:1] = 1'h0;
    M_fulladder4r_x = r4s[4+11-:12];
    M_fulladder4r_y = b4a[0+11-:12];
    M_fulladder4r_cin = r4c[0+11-:12];
    r5s[4+11-:12] = M_fulladder4r_s;
    r4c[1+11-:12] = M_fulladder4r_cout;
    p[4+0-:1] = r5s[4+0-:1];
    b5a[0+10-:11] = a[0+10-:11] & {4'hb{b[5+0-:1]}};
    r5c[0+0-:1] = 1'h0;
    M_fulladder5r_x = r5s[5+10-:11];
    M_fulladder5r_y = b5a[0+10-:11];
    M_fulladder5r_cin = r5c[0+10-:11];
    r6s[5+10-:11] = M_fulladder5r_s;
    r5c[1+10-:11] = M_fulladder5r_cout;
    p[5+0-:1] = r6s[5+0-:1];
    b6a[0+9-:10] = a[0+9-:10] & {4'ha{b[6+0-:1]}};
    r6c[0+0-:1] = 1'h0;
    M_fulladder6r_x = r6s[6+9-:10];
    M_fulladder6r_y = b6a[0+9-:10];
    M_fulladder6r_cin = r6c[0+9-:10];
    r7s[6+9-:10] = M_fulladder6r_s;
    r6c[1+9-:10] = M_fulladder6r_cout;
    p[6+0-:1] = r7s[6+0-:1];
    b7a[0+8-:9] = a[0+8-:9] & {4'h9{b[7+0-:1]}};
    r7c[0+0-:1] = 1'h0;
    M_fulladder7r_x = r7s[7+8-:9];
    M_fulladder7r_y = b7a[0+8-:9];
    M_fulladder7r_cin = r7c[0+8-:9];
    r8s[7+8-:9] = M_fulladder7r_s;
    r7c[1+8-:9] = M_fulladder7r_cout;
    p[7+0-:1] = r8s[7+0-:1];
    b8a[0+7-:8] = a[0+7-:8] & {4'h8{b[8+0-:1]}};
    r8c[0+0-:1] = 1'h0;
    M_fulladder8r_x = r8s[8+7-:8];
    M_fulladder8r_y = b8a[0+7-:8];
    M_fulladder8r_cin = r8c[0+7-:8];
    r9s[8+7-:8] = M_fulladder8r_s;
    r8c[1+7-:8] = M_fulladder8r_cout;
    p[8+0-:1] = r9s[8+0-:1];
    b9a[0+6-:7] = a[0+6-:7] & {3'h7{b[9+0-:1]}};
    r9c[0+0-:1] = 1'h0;
    M_fulladder9r_x = r9s[9+6-:7];
    M_fulladder9r_y = b9a[0+6-:7];
    M_fulladder9r_cin = r9c[0+6-:7];
    r10s[9+6-:7] = M_fulladder9r_s;
    r9c[1+6-:7] = M_fulladder9r_cout;
    p[9+0-:1] = r10s[9+0-:1];
    b10a[0+5-:6] = a[0+5-:6] & {3'h6{b[10+0-:1]}};
    r10c[0+0-:1] = 1'h0;
    M_fulladder10r_x = r10s[10+5-:6];
    M_fulladder10r_y = b10a[0+5-:6];
    M_fulladder10r_cin = r10c[0+5-:6];
    r11s[10+5-:6] = M_fulladder10r_s;
    r10c[1+5-:6] = M_fulladder10r_cout;
    p[10+0-:1] = r11s[10+0-:1];
    b11a[0+4-:5] = a[0+4-:5] & {3'h5{b[11+0-:1]}};
    r11c[0+0-:1] = 1'h0;
    M_fulladder11r_x = r11s[11+4-:5];
    M_fulladder11r_y = b11a[0+4-:5];
    M_fulladder11r_cin = r11c[0+4-:5];
    r12s[11+4-:5] = M_fulladder11r_s;
    r11c[1+4-:5] = M_fulladder11r_cout;
    p[11+0-:1] = r12s[11+0-:1];
    b12a[0+3-:4] = a[0+3-:4] & {3'h4{b[12+0-:1]}};
    r12c[0+0-:1] = 1'h0;
    M_fulladder12r_x = r12s[12+3-:4];
    M_fulladder12r_y = b12a[0+3-:4];
    M_fulladder12r_cin = r12c[0+3-:4];
    r13s[12+3-:4] = M_fulladder12r_s;
    r12c[1+3-:4] = M_fulladder12r_cout;
    p[12+0-:1] = r13s[12+0-:1];
    b13a[0+2-:3] = a[0+2-:3] & {2'h3{b[13+0-:1]}};
    r13c[0+0-:1] = 1'h0;
    M_fulladder13r_x = r13s[13+2-:3];
    M_fulladder13r_y = b13a[0+2-:3];
    M_fulladder13r_cin = r13c[0+2-:3];
    r14s[13+2-:3] = M_fulladder13r_s;
    r13c[1+2-:3] = M_fulladder13r_cout;
    p[13+0-:1] = r14s[13+0-:1];
    b14a[0+1-:2] = a[0+1-:2] & {2'h2{b[14+0-:1]}};
    r14c[0+0-:1] = 1'h0;
    M_fulladder14r_x = r14s[14+1-:2];
    M_fulladder14r_y = b14a[0+1-:2];
    M_fulladder14r_cin = r14c[0+1-:2];
    r15s[14+1-:2] = M_fulladder14r_s;
    r14c[1+1-:2] = M_fulladder14r_cout;
    p[14+0-:1] = r15s[14+0-:1];
    b15a[0+0-:1] = a[0+0-:1] & b[15+0-:1];
    r15c[0+0-:1] = 1'h0;
    M_fulladder15r_x = r15s[15+0-:1];
    M_fulladder15r_y = b15a[0+0-:1];
    M_fulladder15r_cin = r15c[0+0-:1];
    r16s[15+0-:1] = M_fulladder15r_s;
    r15c[1+0-:1] = M_fulladder15r_cout;
    p[15+0-:1] = r16s[15+0-:1];
  end
endmodule
