/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module input_integers_12 (
    input clk,
    input rst,
    input randsel,
    input [1:0] numsel,
    output reg [3:0] int_input
  );
  
  
  
  reg [3:0] a;
  reg [3:0] b;
  reg [3:0] c;
  reg [3:0] d;
  
  reg [15:0] M_seed_d, M_seed_q = 1'h0;
  reg [2:0] M_num_gen_d, M_num_gen_q = 1'h0;
  wire [32-1:0] M_rand_num_num;
  reg [1-1:0] M_rand_num_next;
  reg [32-1:0] M_rand_num_seed;
  pn_gen_20 rand_num (
    .clk(clk),
    .rst(rst),
    .next(M_rand_num_next),
    .seed(M_rand_num_seed),
    .num(M_rand_num_num)
  );
  
  always @* begin
    M_num_gen_d = M_num_gen_q;
    
    M_rand_num_seed = M_seed_q;
    M_rand_num_next = 1'h1;
    if (randsel) begin
      M_num_gen_d = M_rand_num_num[0+2-:3];
    end
    
    case (M_num_gen_q)
      1'h0: begin
        a = 3'h4;
        b = 2'h2;
        c = 1'h1;
        d = 2'h3;
      end
      1'h1: begin
        a = 3'h4;
        b = 3'h4;
        c = 3'h7;
        d = 1'h1;
      end
      2'h2: begin
        a = 3'h5;
        b = 3'h6;
        c = 3'h6;
        d = 1'h1;
      end
      2'h3: begin
        a = 4'h8;
        b = 2'h2;
        c = 3'h4;
        d = 3'h4;
      end
      3'h4: begin
        a = 4'h8;
        b = 3'h4;
        c = 3'h5;
        d = 3'h4;
      end
      3'h5: begin
        a = 4'h8;
        b = 4'h8;
        c = 4'h9;
        d = 3'h6;
      end
      3'h6: begin
        a = 2'h2;
        b = 2'h2;
        c = 3'h5;
        d = 3'h7;
      end
      3'h7: begin
        a = 2'h2;
        b = 4'h8;
        c = 4'h8;
        d = 2'h2;
      end
      4'h8: begin
        a = 2'h3;
        b = 3'h5;
        c = 4'h8;
        d = 2'h2;
      end
      4'h9: begin
        a = 3'h5;
        b = 3'h7;
        c = 3'h5;
        d = 3'h7;
      end
      4'ha: begin
        a = 2'h3;
        b = 2'h3;
        c = 2'h3;
        d = 2'h3;
      end
      4'hb: begin
        a = 3'h5;
        b = 3'h5;
        c = 3'h6;
        d = 3'h7;
      end
      4'hc: begin
        a = 2'h3;
        b = 3'h6;
        c = 4'h8;
        d = 4'h8;
      end
      4'hd: begin
        a = 2'h3;
        b = 3'h5;
        c = 3'h7;
        d = 4'h9;
      end
      4'he: begin
        a = 2'h2;
        b = 2'h3;
        c = 4'h9;
        d = 2'h2;
      end
      4'hf: begin
        a = 2'h3;
        b = 2'h3;
        c = 2'h3;
        d = 3'h5;
      end
      default: begin
        a = 3'h4;
        b = 2'h2;
        c = 1'h1;
        d = 2'h3;
      end
    endcase
    
    case (numsel)
      2'h0: begin
        int_input = a;
      end
      2'h1: begin
        int_input = b;
      end
      2'h2: begin
        int_input = c;
      end
      2'h3: begin
        int_input = d;
      end
      default: begin
        int_input = a;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_seed_q <= M_seed_d;
    M_num_gen_q <= M_num_gen_d;
  end
  
endmodule
