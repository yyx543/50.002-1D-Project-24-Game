/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_alu_13 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] alu
  );
  
  
  
  wire [16-1:0] M_compare_cmp;
  reg [6-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  comparator_21 compare (
    .alufn(M_compare_alufn),
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .cmp(M_compare_cmp)
  );
  
  wire [16-1:0] M_adder_s;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  sixteen_bit_full_adder_22 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .s(M_adder_s),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_boolean_boole;
  reg [6-1:0] M_boolean_alufn;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  boolean_23 boolean (
    .alufn(M_boolean_alufn),
    .a(M_boolean_a),
    .b(M_boolean_b),
    .boole(M_boolean_boole)
  );
  
  wire [16-1:0] M_shifter_shift;
  reg [6-1:0] M_shifter_alufn;
  reg [16-1:0] M_shifter_a;
  reg [4-1:0] M_shifter_b;
  shifter_24 shifter (
    .alufn(M_shifter_alufn),
    .a(M_shifter_a),
    .b(M_shifter_b),
    .shift(M_shifter_shift)
  );
  
  wire [16-1:0] M_mult_p;
  reg [16-1:0] M_mult_a;
  reg [16-1:0] M_mult_b;
  multiplier_25 mult (
    .a(M_mult_a),
    .b(M_mult_b),
    .p(M_mult_p)
  );
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_compare_z = M_adder_z;
    M_compare_v = M_adder_v;
    M_compare_n = M_adder_n;
    M_compare_alufn = alufn;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b[0+3-:4];
    M_shifter_alufn = alufn;
    M_mult_a = a;
    M_mult_b = b;
    
    case (alufn[4+1-:2])
      2'h0: begin
        
        case (alufn[1+0-:1])
          1'h0: begin
            alu = M_adder_s;
          end
          1'h1: begin
            alu = M_mult_p;
          end
          default: begin
            alu = M_adder_s;
          end
        endcase
      end
      2'h1: begin
        alu = M_boolean_boole;
      end
      2'h2: begin
        alu = M_shifter_shift;
      end
      2'h3: begin
        alu = M_compare_cmp;
      end
      default: begin
        
        case (alufn[1+0-:1])
          1'h0: begin
            alu = M_adder_s;
          end
          1'h1: begin
            alu = M_mult_p;
          end
          default: begin
            alu = M_adder_s;
          end
        endcase
      end
    endcase
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
  end
endmodule
