/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module sixteen_bit_full_adder_22 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] s,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  reg [15:0] xb;
  reg [15:0] ss;
  
  wire [(5'h10+0)-1:0] M_adder_s;
  wire [(5'h10+0)-1:0] M_adder_cout;
  reg [(5'h10+0)-1:0] M_adder_x;
  reg [(5'h10+0)-1:0] M_adder_y;
  reg [(5'h10+0)-1:0] M_adder_cin;
  
  genvar GEN_adder0;
  generate
  for (GEN_adder0=0;GEN_adder0<5'h10;GEN_adder0=GEN_adder0+1) begin: adder_gen_0
    full_adder_26 adder (
      .x(M_adder_x[GEN_adder0*(1)+(1)-1-:(1)]),
      .y(M_adder_y[GEN_adder0*(1)+(1)-1-:(1)]),
      .cin(M_adder_cin[GEN_adder0*(1)+(1)-1-:(1)]),
      .s(M_adder_s[GEN_adder0*(1)+(1)-1-:(1)]),
      .cout(M_adder_cout[GEN_adder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    xb = b ^ {5'h10{alufn[0+0-:1]}};
    M_adder_x = a;
    M_adder_y = xb;
    M_adder_cin[0+0-:1] = alufn[0+0-:1];
    M_adder_cin[1+14-:15] = M_adder_cout[0+14-:15];
    ss = M_adder_s;
    s = ss;
    z = ~(ss[0+0-:1] | ss[1+0-:1] | ss[2+0-:1] | ss[3+0-:1] | ss[4+0-:1] | ss[5+0-:1] | ss[6+0-:1] | ss[7+0-:1] | ss[8+0-:1] | ss[9+0-:1] | ss[10+0-:1] | ss[11+0-:1] | ss[12+0-:1] | ss[13+0-:1] | ss[14+0-:1] | ss[15+0-:1]);
    v = (a[15+0-:1] & xb[15+0-:1] & ~ss[15+0-:1]) | (~a[15+0-:1] & ~xb[15+0-:1] & ss[15+0-:1]);
    n = ss[15+0-:1];
  end
endmodule
